// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// create_lexicon
List create_lexicon(IntegerMatrix& Cd, NumericMatrix& Phi, arma::sp_mat& dtm, NumericVector alpha, bool freeze_topics, int threads);
RcppExport SEXP _tidylda_create_lexicon(SEXP CdSEXP, SEXP PhiSEXP, SEXP dtmSEXP, SEXP alphaSEXP, SEXP freeze_topicsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix& >::type Cd(CdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type dtm(dtmSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type freeze_topics(freeze_topicsSEXP);
    Rcpp::traits::input_parameter< int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_lexicon(Cd, Phi, dtm, alpha, freeze_topics, threads));
    return rcpp_result_gen;
END_RCPP
}
// fit_lda_c
List fit_lda_c(List& docs, int& Nk, NumericMatrix& beta, NumericVector alpha, IntegerMatrix Cd, IntegerMatrix Cv, IntegerVector Ck, List Zd, NumericMatrix& Phi, int& iterations, int& burnin, bool& freeze_topics, bool& calc_likelihood, bool& optimize_alpha);
RcppExport SEXP _tidylda_fit_lda_c(SEXP docsSEXP, SEXP NkSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP CdSEXP, SEXP CvSEXP, SEXP CkSEXP, SEXP ZdSEXP, SEXP PhiSEXP, SEXP iterationsSEXP, SEXP burninSEXP, SEXP freeze_topicsSEXP, SEXP calc_likelihoodSEXP, SEXP optimize_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< int& >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Cd(CdSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type Cv(CvSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type Ck(CkSEXP);
    Rcpp::traits::input_parameter< List >::type Zd(ZdSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< int& >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< int& >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< bool& >::type freeze_topics(freeze_topicsSEXP);
    Rcpp::traits::input_parameter< bool& >::type calc_likelihood(calc_likelihoodSEXP);
    Rcpp::traits::input_parameter< bool& >::type optimize_alpha(optimize_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_lda_c(docs, Nk, beta, alpha, Cd, Cv, Ck, Zd, Phi, iterations, burnin, freeze_topics, calc_likelihood, optimize_alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tidylda_create_lexicon", (DL_FUNC) &_tidylda_create_lexicon, 6},
    {"_tidylda_fit_lda_c", (DL_FUNC) &_tidylda_fit_lda_c, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_tidylda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
