// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tidylda.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// create_lexicon
Rcpp::List create_lexicon(arma::imat& Cd, const arma::mat& Phi, arma::sp_mat& dtm, const arma::vec alpha, const bool freeze_topics, const int threads);
static SEXP _tidylda_create_lexicon_try(SEXP CdSEXP, SEXP PhiSEXP, SEXP dtmSEXP, SEXP alphaSEXP, SEXP freeze_topicsSEXP, SEXP threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type Cd(CdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat& >::type dtm(dtmSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type freeze_topics(freeze_topicsSEXP);
    Rcpp::traits::input_parameter< const int >::type threads(threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(create_lexicon(Cd, Phi, dtm, alpha, freeze_topics, threads));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tidylda_create_lexicon(SEXP CdSEXP, SEXP PhiSEXP, SEXP dtmSEXP, SEXP alphaSEXP, SEXP freeze_topicsSEXP, SEXP threadsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tidylda_create_lexicon_try(CdSEXP, PhiSEXP, dtmSEXP, alphaSEXP, freeze_topicsSEXP, threadsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fit_lda_c
Rcpp::List fit_lda_c(const std::vector<std::vector<int>>& docs, const int Nk, const arma::mat& beta, arma::vec& alpha, arma::umat& Cd, arma::mat& Cv, arma::uvec& Ck, std::vector<std::vector<int>>& Zd, const arma::mat& Phi, const int iterations, const int burnin, const bool freeze_topics, const bool calc_likelihood, const bool optimize_alpha);
static SEXP _tidylda_fit_lda_c_try(SEXP docsSEXP, SEXP NkSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP CdSEXP, SEXP CvSEXP, SEXP CkSEXP, SEXP ZdSEXP, SEXP PhiSEXP, SEXP iterationsSEXP, SEXP burninSEXP, SEXP freeze_topicsSEXP, SEXP calc_likelihoodSEXP, SEXP optimize_alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const std::vector<std::vector<int>>& >::type docs(docsSEXP);
    Rcpp::traits::input_parameter< const int >::type Nk(NkSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type Cd(CdSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Cv(CvSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type Ck(CkSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<int>>& >::type Zd(ZdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< const int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< const bool >::type freeze_topics(freeze_topicsSEXP);
    Rcpp::traits::input_parameter< const bool >::type calc_likelihood(calc_likelihoodSEXP);
    Rcpp::traits::input_parameter< const bool >::type optimize_alpha(optimize_alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fit_lda_c(docs, Nk, beta, alpha, Cd, Cv, Ck, Zd, Phi, iterations, burnin, freeze_topics, calc_likelihood, optimize_alpha));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _tidylda_fit_lda_c(SEXP docsSEXP, SEXP NkSEXP, SEXP betaSEXP, SEXP alphaSEXP, SEXP CdSEXP, SEXP CvSEXP, SEXP CkSEXP, SEXP ZdSEXP, SEXP PhiSEXP, SEXP iterationsSEXP, SEXP burninSEXP, SEXP freeze_topicsSEXP, SEXP calc_likelihoodSEXP, SEXP optimize_alphaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_tidylda_fit_lda_c_try(docsSEXP, NkSEXP, betaSEXP, alphaSEXP, CdSEXP, CvSEXP, CkSEXP, ZdSEXP, PhiSEXP, iterationsSEXP, burninSEXP, freeze_topicsSEXP, calc_likelihoodSEXP, optimize_alphaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int _tidylda_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("Rcpp::List(*create_lexicon)(arma::imat&,const arma::mat&,arma::sp_mat&,const arma::vec,const bool,const int)");
        signatures.insert("Rcpp::List(*fit_lda_c)(const std::vector<std::vector<int>>&,const int,const arma::mat&,arma::vec&,arma::umat&,arma::mat&,arma::uvec&,std::vector<std::vector<int>>&,const arma::mat&,const int,const int,const bool,const bool,const bool)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tidylda_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tidylda", "_tidylda_create_lexicon", (DL_FUNC)_tidylda_create_lexicon_try);
    R_RegisterCCallable("tidylda", "_tidylda_fit_lda_c", (DL_FUNC)_tidylda_fit_lda_c_try);
    R_RegisterCCallable("tidylda", "_tidylda_RcppExport_validate", (DL_FUNC)_tidylda_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_tidylda_create_lexicon", (DL_FUNC) &_tidylda_create_lexicon, 6},
    {"_tidylda_fit_lda_c", (DL_FUNC) &_tidylda_fit_lda_c, 14},
    {"_tidylda_RcppExport_registerCCallable", (DL_FUNC) &_tidylda_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tidylda(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
